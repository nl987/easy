source ~/.easy/etc/easyrc

function __easy_getfiles {
  if [[ -z $1 ]]; then
    local files=$(git diff --name-only $EASY_MAIN)
  else
    local files=$(git diff --name-only $EASY_MAIN | grep -P $1)
  fi

  echo $files
}

function __easy_loadfile {
  local class=$(cat $1 | grep ^moduleclass | grep -Po '(?<=['\''"]).*(?=['\''"])')
  local name=$(basename $1 .eb | sed 's|-\([0-9]\)|/\1|' )

  local mod=$class/$class/$name
  echo Loading $mod...
  module load $mod
}

function __easy_checkstyle {
  local files=$(__easy_getfiles $1)
  eb --check-style $files
}

function __easy_checkout {
  if [[ -z $1 ]]; then
    echo Specify regexp to match one branch
  else
    local cnt=$(git branch --remote | grep -P $1 | wc -l)
    if [[ $cnt -gt 1 ]]; then
      echo Regexp matches more than one branch
    else
      local br=$(git branch --remote | grep -P $1 | cut -d/ -f2-)
      git checkout $br
    fi
  fi

  __easy_getfiles | tr ' ' '\n'
}

function __easy_merge {
  local branch=$(git branch | grep \* | cut -d\  -f2)
  if [[ $branch == $EASY_MAIN ]]; then
    echo On branch $EASY_MAIN, not merging $EASY_MAIN into $EASY_MAIN
  else
    git merge -m "easy merged $EASY_MAIN into $branch" $EASY_MAIN
  fi
}

function __easy_build {
  local files=$(__easy_getfiles $1)
  eb --rebuild --robot $files
}

function __easy_load {
  if [[ -z $1 ]]; then
    local cnt=$(git diff --name-only $EASY_MAIN | wc -l)
    if [[ $cnt -gt 1 ]]; then
      echo Branch differs in more than one file
    else
      local file=$(git diff --name-only $EASY_MAIN)
      __easy_loadfile $file
    fi
  else
    local cnt=$(git diff --name-only $EASY_MAIN | grep -P $1 | wc -l)
    if [[ $cnt -gt 1 ]]; then
      echo Regexp matches more than one file
    else
      local file=$(git diff --name-only $EASY_MAIN | grep -P $1)
      __easy_loadfile $file
    fi
  fi
}

function __easy_clean {
  git checkout $EASY_MAIN
  git branch | grep -v $EASY_MAIN | xargs git branch -D
  git pull
  git remote prune $EASY_REMOTE
}

function __easy_usage {
  cat <<EOUSAGE
Usage:
  easy                            Prepare easy for use

  easy (co|checkout) REGEXP       Search for a remote branch maching the
                                    regex REGEXP and check it out.
  easy (m|merge)                  Merge $EASY_MAIN into this branch.
  easy (d|diff) [REGEXP]          Show the files that differ from $EASY_MAIN,
                                    and optionally filter on REGEXP.
  easy (cs|check-style) [REGEXP]  Find files that differ from $EASY_MAIN,
                                    optionally filter on REGEXP, and
                                    run easybuild style checks.
  easy (b|build) [REGEXP]         Find files that differ from $EASY_MAIN,
                                    optionally filter on REGEXP, and
                                    attempt to build with easybuild.
  easy (lo|load) [REGEXP]         Make sane attempts to determine the
                                    module you're reviewing and load it.
  easy (c|clean)                  Checkout the $EASY_MAIN branch, and
                                    locally delete any others.

  easy (h|u|help|usage)           Show this help
EOUSAGE
}

function __easy_fail {
  cat << EOFAIL
Command not found: "$1".

Try \`easy help\` for assistance.
EOFAIL
}

function __easy_prep {
  module purge
  module load $EASY_ENV
  [ -n $EASY_GIT ] && module load $EASY_GIT
  cd $EASY_ROOT
  git pull
  git remote prune $EASY_REMOTE
}

function easy {
  case $1 in
    co|checkout)
      __easy_checkout $2
      ;;
    m|merge)
      __easy_merge
      ;;
    cs|check-style)
      __easy_checkstyle $2
      ;;
    d|diff)
      __easy_getfiles $2 | tr ' ' '\n'
      ;;
    b|build)
      __easy_build $2
      ;;
    bc|clean)
      __easy_clean
      ;;
    lo|load)
      __easy_load $2
      ;;
    h|help|u|usage)
      __easy_usage
      ;;
    '')
      __easy_prep
      ;;
    *)
      __easy_fail $1
      ;;
  esac
}

# vim: ft=sh
